//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TouchTimeGapComponent touchTimeGap { get { return (TouchTimeGapComponent)GetComponent(GameComponentsLookup.TouchTimeGap); } }
    public bool hasTouchTimeGap { get { return HasComponent(GameComponentsLookup.TouchTimeGap); } }

    public void AddTouchTimeGap(double newValue) {
        var index = GameComponentsLookup.TouchTimeGap;
        var component = CreateComponent<TouchTimeGapComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTouchTimeGap(double newValue) {
        var index = GameComponentsLookup.TouchTimeGap;
        var component = CreateComponent<TouchTimeGapComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTouchTimeGap() {
        RemoveComponent(GameComponentsLookup.TouchTimeGap);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTouchTimeGap;

    public static Entitas.IMatcher<GameEntity> TouchTimeGap {
        get {
            if (_matcherTouchTimeGap == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TouchTimeGap);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTouchTimeGap = matcher;
            }

            return _matcherTouchTimeGap;
        }
    }
}
