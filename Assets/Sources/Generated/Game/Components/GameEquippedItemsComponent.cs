//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity equippedItemsEntity { get { return GetGroup(GameMatcher.EquippedItems).GetSingleEntity(); } }
    public EquippedItemsComponent equippedItems { get { return equippedItemsEntity.equippedItems; } }
    public bool hasEquippedItems { get { return equippedItemsEntity != null; } }

    public GameEntity SetEquippedItems(System.Collections.Generic.List<AccessoryID> new_accessoryList) {
        if (hasEquippedItems) {
            throw new Entitas.EntitasException("Could not set EquippedItems!\n" + this + " already has an entity with EquippedItemsComponent!",
                "You should check if the context already has a equippedItemsEntity before setting it or use context.ReplaceEquippedItems().");
        }
        var entity = CreateEntity();
        entity.AddEquippedItems(new_accessoryList);
        return entity;
    }

    public void ReplaceEquippedItems(System.Collections.Generic.List<AccessoryID> new_accessoryList) {
        var entity = equippedItemsEntity;
        if (entity == null) {
            entity = SetEquippedItems(new_accessoryList);
        } else {
            entity.ReplaceEquippedItems(new_accessoryList);
        }
    }

    public void RemoveEquippedItems() {
        equippedItemsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public EquippedItemsComponent equippedItems { get { return (EquippedItemsComponent)GetComponent(GameComponentsLookup.EquippedItems); } }
    public bool hasEquippedItems { get { return HasComponent(GameComponentsLookup.EquippedItems); } }

    public void AddEquippedItems(System.Collections.Generic.List<AccessoryID> new_accessoryList) {
        var index = GameComponentsLookup.EquippedItems;
        var component = CreateComponent<EquippedItemsComponent>(index);
        component._accessoryList = new_accessoryList;
        AddComponent(index, component);
    }

    public void ReplaceEquippedItems(System.Collections.Generic.List<AccessoryID> new_accessoryList) {
        var index = GameComponentsLookup.EquippedItems;
        var component = CreateComponent<EquippedItemsComponent>(index);
        component._accessoryList = new_accessoryList;
        ReplaceComponent(index, component);
    }

    public void RemoveEquippedItems() {
        RemoveComponent(GameComponentsLookup.EquippedItems);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEquippedItems;

    public static Entitas.IMatcher<GameEntity> EquippedItems {
        get {
            if (_matcherEquippedItems == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EquippedItems);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEquippedItems = matcher;
            }

            return _matcherEquippedItems;
        }
    }
}
