//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CommandContext {

    public CommandEntity loadSceneEntity { get { return GetGroup(CommandMatcher.LoadScene).GetSingleEntity(); } }
    public LoadSceneComponent loadScene { get { return loadSceneEntity.loadScene; } }
    public bool hasLoadScene { get { return loadSceneEntity != null; } }

    public CommandEntity SetLoadScene(string newName) {
        if (hasLoadScene) {
            throw new Entitas.EntitasException("Could not set LoadScene!\n" + this + " already has an entity with LoadSceneComponent!",
                "You should check if the context already has a loadSceneEntity before setting it or use context.ReplaceLoadScene().");
        }
        var entity = CreateEntity();
        entity.AddLoadScene(newName);
        return entity;
    }

    public void ReplaceLoadScene(string newName) {
        var entity = loadSceneEntity;
        if (entity == null) {
            entity = SetLoadScene(newName);
        } else {
            entity.ReplaceLoadScene(newName);
        }
    }

    public void RemoveLoadScene() {
        loadSceneEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CommandEntity {

    public LoadSceneComponent loadScene { get { return (LoadSceneComponent)GetComponent(CommandComponentsLookup.LoadScene); } }
    public bool hasLoadScene { get { return HasComponent(CommandComponentsLookup.LoadScene); } }

    public void AddLoadScene(string newName) {
        var index = CommandComponentsLookup.LoadScene;
        var component = CreateComponent<LoadSceneComponent>(index);
        component.name = newName;
        AddComponent(index, component);
    }

    public void ReplaceLoadScene(string newName) {
        var index = CommandComponentsLookup.LoadScene;
        var component = CreateComponent<LoadSceneComponent>(index);
        component.name = newName;
        ReplaceComponent(index, component);
    }

    public void RemoveLoadScene() {
        RemoveComponent(CommandComponentsLookup.LoadScene);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CommandEntity : ILoadSceneEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class CommandMatcher {

    static Entitas.IMatcher<CommandEntity> _matcherLoadScene;

    public static Entitas.IMatcher<CommandEntity> LoadScene {
        get {
            if (_matcherLoadScene == null) {
                var matcher = (Entitas.Matcher<CommandEntity>)Entitas.Matcher<CommandEntity>.AllOf(CommandComponentsLookup.LoadScene);
                matcher.componentNames = CommandComponentsLookup.componentNames;
                _matcherLoadScene = matcher;
            }

            return _matcherLoadScene;
        }
    }
}
