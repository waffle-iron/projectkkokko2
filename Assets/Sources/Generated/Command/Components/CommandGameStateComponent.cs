//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CommandContext {

    public CommandEntity gameStateEntity { get { return GetGroup(CommandMatcher.GameState).GetSingleEntity(); } }
    public GameStateComponent gameState { get { return gameStateEntity.gameState; } }
    public bool hasGameState { get { return gameStateEntity != null; } }

    public CommandEntity SetGameState(int newState, System.Type newStateType) {
        if (hasGameState) {
            throw new Entitas.EntitasException("Could not set GameState!\n" + this + " already has an entity with GameStateComponent!",
                "You should check if the context already has a gameStateEntity before setting it or use context.ReplaceGameState().");
        }
        var entity = CreateEntity();
        entity.AddGameState(newState, newStateType);
        return entity;
    }

    public void ReplaceGameState(int newState, System.Type newStateType) {
        var entity = gameStateEntity;
        if (entity == null) {
            entity = SetGameState(newState, newStateType);
        } else {
            entity.ReplaceGameState(newState, newStateType);
        }
    }

    public void RemoveGameState() {
        gameStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CommandEntity {

    public GameStateComponent gameState { get { return (GameStateComponent)GetComponent(CommandComponentsLookup.GameState); } }
    public bool hasGameState { get { return HasComponent(CommandComponentsLookup.GameState); } }

    public void AddGameState(int newState, System.Type newStateType) {
        var index = CommandComponentsLookup.GameState;
        var component = CreateComponent<GameStateComponent>(index);
        component.state = newState;
        component.stateType = newStateType;
        AddComponent(index, component);
    }

    public void ReplaceGameState(int newState, System.Type newStateType) {
        var index = CommandComponentsLookup.GameState;
        var component = CreateComponent<GameStateComponent>(index);
        component.state = newState;
        component.stateType = newStateType;
        ReplaceComponent(index, component);
    }

    public void RemoveGameState() {
        RemoveComponent(CommandComponentsLookup.GameState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CommandEntity : IGameStateEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class CommandMatcher {

    static Entitas.IMatcher<CommandEntity> _matcherGameState;

    public static Entitas.IMatcher<CommandEntity> GameState {
        get {
            if (_matcherGameState == null) {
                var matcher = (Entitas.Matcher<CommandEntity>)Entitas.Matcher<CommandEntity>.AllOf(CommandComponentsLookup.GameState);
                matcher.componentNames = CommandComponentsLookup.componentNames;
                _matcherGameState = matcher;
            }

            return _matcherGameState;
        }
    }
}
